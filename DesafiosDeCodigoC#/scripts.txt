Desafio 1:

using System;

class Program
{
    static void Main(string[] args)
    {

// TODO: Declare as variáveis para guardar as informações de nome, email e senha:
    string registroEmail;
    string registroNome;
    string registroSenha;

// Obtém o email e nome do usuário a partir da entrada do console
    registroEmail = Console.ReadLine();
    registroNome = Console.ReadLine();
    registroSenha = Console.ReadLine();
    
   

// TODO: Imprima a mensagem formatada com o nome do usuário e o email de registro:
    Console.WriteLine(registroNome + ", verifique o email: " + registroEmail + " para ativar.");


    }
}

Desafio 2:

using System;

class Program
{
    static void Main()
    {

       // TODO: Crie as variáveis titulo, descricao e dataVencimento para guardar as informações das tarefas:
       string titulo;
       string descricao;    
       // Obtém o titulo e a descricao a partir da entrada do console  
       titulo = Console.ReadLine();
       descricao = Console.ReadLine();
  
       // TODO: Crie uma estrutura condicional 'if/else' para verificar se a descrição da tarefa excede 50 caracteres.
       if(descricao.Length < 50){
          // Caso a descricao esteja dentro do limite é solicitado a entrada pelo console:
          string dataVencimento = Console.ReadLine();
           // TODO: Imprima a descricao e a data de vencimento como nos exemplos da tabela:  
          Console.WriteLine(descricao + " ate " + dataVencimento);
       }else
       {
         Console.WriteLine("Descricao ultrapassa limite de caracteres.");
       }
          
    }
}

Desafio 3:

using System;

class Program
{
    static void Main()
    {
    // Solicita ao usuário os limites inferiores e superiores
    int limiteInferior = int.Parse(Console.ReadLine());
    int limiteSuperior = int.Parse(Console.ReadLine());

    // Variável para acumular a soma dos números pares
    int somaPares = 0;

    // TODO: Crie um Loop para percorrer os números no intervalo
    // Lembre-se: O limiteSuperior deve ser menor ou igual a i;
    for(int i=limiteInferior; i<=limiteSuperior; i++)
    {
       // TODO: Implemente o if para verificar se o número é par:
      if(i % 2 == 0)
      {
        // TODO: Crie o acumulador para a soma dos números pares:
        somaPares= somaPares + i;
      }
    }
    // Exibe o resultado
    Console.WriteLine($"A soma dos numeros pares de {limiteInferior} a {limiteSuperior} e: {somaPares}");
    }
}

Desafio 4:

using System;

class Program
{
    static void Main()
    {
        // Pergunta ao usuário quantos jogos deseja adicionar:
        int quantidadeJogos = int.Parse(Console.ReadLine());

        // TODO: Inicializa os arrays com base na quantidade informada pelo usuário:
        string[] nomesJogos = new string[quantidadeJogos];

        // TODO: Crei um Loop para adicionar jogos conforme a quantidade especificada:
        for(int i = 0; i < quantidadeJogos; i++)
        {
           //TODO: Chame a função AdicionarJogo para obter o nome do jogo e armazená-lo no array:
           AdicionarJogo(i, nomesJogos);
        }
        
        // Exibe o resumo da adição de jogos
        ExibirResumoAdicaoJogos(quantidadeJogos, nomesJogos);
    }

    static void AdicionarJogo(int indice, string[] nomes)
    {
        // Entrada do nome do jogo
        nomes[indice] = Console.ReadLine();
    }

    static void ExibirResumoAdicaoJogos(int quantidadeJogos, string[] nomes)
    {
        string nomesFormatados = string.Join(", ", nomes);
        Console.WriteLine($"Foi adicionado '{quantidadeJogos}' jogos: {nomesFormatados} ao catalogo.");
    }
}

Desafio 5:

using System;

class Program
{
    static void Main()
    {
        // Solicita o nome do usuário, quilômetros percorridos por dia, 
        // Horas de uso de eletrônicos por dia e o número de refeições com carne:
        string nome = Console.ReadLine();
        double quilometrosPorDia = double.Parse(Console.ReadLine());
        int horasDeEletronicos = int.Parse(Console.ReadLine());
        int refeicoesComCarne = int.Parse(Console.ReadLine());

        // Chama o método para calcular a pegada de carbono
        double pegadaDeCarbono = CalcularPegadaDeCarbono(quilometrosPorDia, horasDeEletronicos, refeicoesComCarne);

        // Exibe o resultado para o usuário:
        Console.WriteLine($"{nome}, sua pegada de carbono e de {pegadaDeCarbono} toneladas de CO2 por ano.");

        // Aguarda a entrada do usuário antes de encerrar o programa:
        Console.ReadLine();
    }

    // Crie um método/função para calcular a pegada de carbono com base nos parâmetros fornecidos:
    public static double CalcularPegadaDeCarbono(double quilometrosPorDia, int horasDeEletronicos, int refeicoesComCarne)
    {
        double pegadaDeCarbono = (quilometrosPorDia * 365 * 0.2) + (horasDeEletronicos * 0.1) + (refeicoesComCarne * 0.5);
        return pegadaDeCarbono;
    }
}

